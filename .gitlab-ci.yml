# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Global Settings
stages:
  - build
  - test

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GET_SOURCES_ATTEMPTS: 3
  CMAKE_BUILD_TYPE: Release
  DEP_ROOT: /workspace
  DCL_ROOT_DIR: $DEP_ROOT/de-dcl
  EDGEX_GRPC_LIB: $DEP_ROOT/grpc/lib

default:
  image: 192.168.13.215/tvm_ci_cpu:v1.0_d13e2b6d
  interruptible: true
  tags:
    - edgex_tvm_ci
  cache:
    key: one-key-to-rule-them-all
    paths:
      - 3rdparty/
  retry:
    max: 1
    when:
      - unknown_failure
      - runner_system_failure
      - data_integrity_failure


# Jobs
lint:
  stage: build
  image: 192.168.13.215/tvm_ci_lint:v1.0_c4c31de9
  tags:
    - edgex_tvm_ci_lint
  before_script:
    - echo "********** START LINT **********"
  script:
    - ./tests/scripts/task_lint.sh

build:
  stage: build
  before_script:
    - echo "********** START COMPILING **********"
  script:
    - |
      rm -rf build && mkdir build
      pushd build
      cp ../cmake/config.cmake .
      echo set\(CMAKE_CXX_FLAGS "-Werror ${CMAKE_CXX_FLAGS}"\) >> config.cmake
      echo set\(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}\) >> config.cmake
      echo set\(USE_LLVM ${DEP_ROOT}/llvm/bin/llvm-config\) >> config.cmake
      echo set\(USE_EDGEX ${DCL_ROOT_DIR}/client\) >> config.cmake
      cmake .. && make -j32
      popd
  artifacts:
    when: on_success
    paths:
    - build
    expire_in: 1 day

.tvm_env: &tvm_env
  - |
    echo "********** SET TVM ENV **********"
    export TVM_HOME=$(pwd)
    export PYTHONPATH=$TVM_HOME/python:${PYTHONPATH}
    # TODO: tvm_test found no *.so, but it doesn't really need those libs
    export EDGEX_ROOT_DIR=${DCL_ROOT_DIR}/client
    export EDGEX_SERVER_DIR=${DCL_ROOT_DIR}/server

# $CI_PIPELINE_SOURCE could be either "schedule" or "push"
# edgex test
tvm_edgex:
  stage: test
  needs: [build]
  before_script:
    - *tvm_env
    - |
      echo "***** START SERVER *****"
      pushd ${DCL_ROOT_DIR}/server/bin
      export LD_LIBRARY_PATH=${DCL_ROOT_DIR}/server/lib/
      ./dclsim_rpc_server --dcl_cfg=dcl.cfg &
      popd
      sleep 5
  script:
    - |
      export LD_LIBRARY_PATH=${EDGEX_ROOT_DIR}/lib/:${EDGEX_SERVER_DIR}/lib
      export EDGEX_MODELS_DIR=${DEP_ROOT}/models
      export EDGEX_LLVM_TOOLCHAIN_DIR=${DEP_ROOT}/llvm/bin
      export EDGEX_DEBUG_ISS=on
      echo "********** TEST EDGEX UNIT TEST **********"
      if [ "$CI_PIPELINE_SOURCE" == "push" ]
      then
        shopt -s expand_aliases
        alias pytest='pytest -m "not edgex_slow"'
      fi
      type pytest
      pytest -vv --ignore-glob=tests/python/contrib/edgex/quantization/* tests/python/contrib/edgex/

# fast unittest for basic tvm abilities
tvm_basic_unittest:
  stage: test
  needs: [build]
  before_script:
    - *tvm_env
  script:
    - |
      export LD_LIBRARY_PATH=${EDGEX_ROOT_DIR}/lib/:${EDGEX_SERVER_DIR}/lib
      pytest -vv tests/python/unittest/

# edgex quant test
tvm_edgex_quant:
  stage: test
  needs: [build]
  before_script:
    - *tvm_env
    - export LD_LIBRARY_PATH=${EDGEX_ROOT_DIR}/lib/:${EDGEX_SERVER_DIR}/lib
  script:
    - |
      echo "********** TEST TVM QUANTIZATION **********"
      export QUANT_DIR=${DEP_ROOT}/quant
      if [ "$CI_PIPELINE_SOURCE" == "push" ]
      then
        shopt -s expand_aliases
        alias pytest='pytest -m "not edgex_slow"'
      fi
      type pytest
      pytest -vv tests/python/contrib/edgex/quantization/

# Nightly Test
# upstream testcases related to gpu
tvm_cpu_nightly_test:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  retry:
    max: 1
    when: always
  before_script:
    - *tvm_env
  script:
  - |
    echo "********** START COMPILING **********"
    rm -rf build && mkdir build
    pushd build
    cp ../cmake/config.cmake .
    echo set\(CMAKE_CXX_FLAGS "-Werror ${CMAKE_CXX_FLAGS}"\) >> config.cmake
    echo set\(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}\) >> config.cmake
    echo set\(USE_MICRO ON\) >> config.cmake
    echo set\(USE_LLVM ${DEP_ROOT}/llvm/bin/llvm-config\) >> config.cmake
    cmake .. && make -j32
    popd
    echo "********** TEST TVM CPU UNIT TEST **********"
    rm -r tests/python/contrib/edgex
    bash ./tests/scripts/task_python_unittest.sh
    # bash ./tests/scripts/task_python_integration.sh
    # bash ./tests/scripts/task_python_frontend_cpu.sh

# upstream testcases related to gpu
tvm_gpu_nightly_test:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  tags:
    - tvm
    - gpu
  variables:
    CUDA_TOOLKIT_DIR: /usr/local/cuda
    CUDA_HOST_DRIVER_LIB: /host_cuda_driver_libs
    CUDA_DRIVER_LIB: /cuda_driver_libs
  retry:
    max: 1
    when: always
  before_script:
    - *tvm_env
    - mkdir ${CUDA_DRIVER_LIB}
    - cp ${CUDA_HOST_DRIVER_LIB}/libcuda* ${CUDA_DRIVER_LIB}/
    - cp ${CUDA_HOST_DRIVER_LIB}/libnvidia* ${CUDA_DRIVER_LIB}/
    - export LD_LIBRARY_PATH=${CUDA_TOOLKIT_DIR}/lib64:${CUDA_DRIVER_LIB}
    - export PATH=${CUDA_TOOLKIT_DIR}/bin:${PATH}
    - nvidia-smi
  script:
    - |
      echo "********** START COMPILING **********"
      rm -rf build && mkdir build
      pushd build
      cp ../cmake/config.cmake .
      echo set\(CMAKE_CXX_FLAGS "-Werror ${CMAKE_CXX_FLAGS}"\) >> config.cmake
      echo set\(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}\) >> config.cmake
      echo set\(USE_MICRO ON\) >> config.cmake
      echo set\(USE_LLVM ${DEP_ROOT}/llvm/bin/llvm-config\) >> config.cmake
      echo set\(USE_CUDA /usr/local/cuda\) >> config.cmake
      cmake .. && make -j32
      popd
      echo "********** TEST TVM GPU UNIT TEST **********"
      rm -r tests/python/contrib/edgex
      bash ./tests/scripts/task_python_unittest_gpuonly.sh
      bash ./tests/scripts/task_python_integration_gpuonly.sh
      bash ./tests/scripts/task_python_topi.sh
